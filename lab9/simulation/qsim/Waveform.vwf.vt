// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/26/2019 17:35:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab9
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab9_vlg_sample_tst(
	CLK,
	sampler_tx
);
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab9_vlg_check_tst (
	a1,
	a2,
	b1,
	b2,
	c1,
	c2,
	d1,
	d2,
	e1,
	e2,
	f1,
	f2,
	g1,
	g2,
	Q11,
	Q12,
	Q13,
	Q14,
	Q21,
	Q22,
	Q23,
	Q24,
	sampler_rx
);
input  a1;
input  a2;
input  b1;
input  b2;
input  c1;
input  c2;
input  d1;
input  d2;
input  e1;
input  e2;
input  f1;
input  f2;
input  g1;
input  g2;
input  Q11;
input  Q12;
input  Q13;
input  Q14;
input  Q21;
input  Q22;
input  Q23;
input  Q24;
input sampler_rx;

reg  a1_expected;
reg  a2_expected;
reg  b1_expected;
reg  b2_expected;
reg  c1_expected;
reg  c2_expected;
reg  d1_expected;
reg  d2_expected;
reg  e1_expected;
reg  e2_expected;
reg  f1_expected;
reg  f2_expected;
reg  g1_expected;
reg  g2_expected;
reg  Q11_expected;
reg  Q12_expected;
reg  Q13_expected;
reg  Q14_expected;
reg  Q21_expected;
reg  Q22_expected;
reg  Q23_expected;
reg  Q24_expected;

reg  a1_prev;
reg  a2_prev;
reg  b1_prev;
reg  b2_prev;
reg  c1_prev;
reg  c2_prev;
reg  d1_prev;
reg  d2_prev;
reg  e1_prev;
reg  e2_prev;
reg  f1_prev;
reg  f2_prev;
reg  g1_prev;
reg  g2_prev;
reg  Q11_prev;
reg  Q12_prev;
reg  Q13_prev;
reg  Q14_prev;
reg  Q21_prev;
reg  Q22_prev;
reg  Q23_prev;
reg  Q24_prev;

reg  Q11_expected_prev;
reg  Q12_expected_prev;
reg  Q13_expected_prev;
reg  Q14_expected_prev;
reg  Q21_expected_prev;
reg  Q22_expected_prev;
reg  Q23_expected_prev;
reg  Q24_expected_prev;

reg  last_Q11_exp;
reg  last_Q12_exp;
reg  last_Q13_exp;
reg  last_Q14_exp;
reg  last_Q21_exp;
reg  last_Q22_exp;
reg  last_Q23_exp;
reg  last_Q24_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	a1_prev = a1;
	a2_prev = a2;
	b1_prev = b1;
	b2_prev = b2;
	c1_prev = c1;
	c2_prev = c2;
	d1_prev = d1;
	d2_prev = d2;
	e1_prev = e1;
	e2_prev = e2;
	f1_prev = f1;
	f2_prev = f2;
	g1_prev = g1;
	g2_prev = g2;
	Q11_prev = Q11;
	Q12_prev = Q12;
	Q13_prev = Q13;
	Q14_prev = Q14;
	Q21_prev = Q21;
	Q22_prev = Q22;
	Q23_prev = Q23;
	Q24_prev = Q24;
end

// update expected /o prevs

always @(trigger)
begin
	Q11_expected_prev = Q11_expected;
	Q12_expected_prev = Q12_expected;
	Q13_expected_prev = Q13_expected;
	Q14_expected_prev = Q14_expected;
	Q21_expected_prev = Q21_expected;
	Q22_expected_prev = Q22_expected;
	Q23_expected_prev = Q23_expected;
	Q24_expected_prev = Q24_expected;
end



// expected Q14
initial
begin
	Q14_expected = 1'bX;
end 

// expected Q13
initial
begin
	Q13_expected = 1'bX;
end 

// expected Q12
initial
begin
	Q12_expected = 1'bX;
end 

// expected Q11
initial
begin
	Q11_expected = 1'bX;
end 

// expected Q24
initial
begin
	Q24_expected = 1'bX;
end 

// expected Q23
initial
begin
	Q23_expected = 1'bX;
end 

// expected Q22
initial
begin
	Q22_expected = 1'bX;
end 

// expected Q21
initial
begin
	Q21_expected = 1'bX;
end 
// generate trigger
always @(a1_expected or a1 or a2_expected or a2 or b1_expected or b1 or b2_expected or b2 or c1_expected or c1 or c2_expected or c2 or d1_expected or d1 or d2_expected or d2 or e1_expected or e1 or e2_expected or e2 or f1_expected or f1 or f2_expected or f2 or g1_expected or g1 or g2_expected or g2 or Q11_expected or Q11 or Q12_expected or Q12 or Q13_expected or Q13 or Q14_expected or Q14 or Q21_expected or Q21 or Q22_expected or Q22 or Q23_expected or Q23 or Q24_expected or Q24)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a1 = %b | expected a2 = %b | expected b1 = %b | expected b2 = %b | expected c1 = %b | expected c2 = %b | expected d1 = %b | expected d2 = %b | expected e1 = %b | expected e2 = %b | expected f1 = %b | expected f2 = %b | expected g1 = %b | expected g2 = %b | expected Q11 = %b | expected Q12 = %b | expected Q13 = %b | expected Q14 = %b | expected Q21 = %b | expected Q22 = %b | expected Q23 = %b | expected Q24 = %b | ",a1_expected_prev,a2_expected_prev,b1_expected_prev,b2_expected_prev,c1_expected_prev,c2_expected_prev,d1_expected_prev,d2_expected_prev,e1_expected_prev,e2_expected_prev,f1_expected_prev,f2_expected_prev,g1_expected_prev,g2_expected_prev,Q11_expected_prev,Q12_expected_prev,Q13_expected_prev,Q14_expected_prev,Q21_expected_prev,Q22_expected_prev,Q23_expected_prev,Q24_expected_prev);
	$display("| real a1 = %b | real a2 = %b | real b1 = %b | real b2 = %b | real c1 = %b | real c2 = %b | real d1 = %b | real d2 = %b | real e1 = %b | real e2 = %b | real f1 = %b | real f2 = %b | real g1 = %b | real g2 = %b | real Q11 = %b | real Q12 = %b | real Q13 = %b | real Q14 = %b | real Q21 = %b | real Q22 = %b | real Q23 = %b | real Q24 = %b | ",a1_prev,a2_prev,b1_prev,b2_prev,c1_prev,c2_prev,d1_prev,d2_prev,e1_prev,e2_prev,f1_prev,f2_prev,g1_prev,g2_prev,Q11_prev,Q12_prev,Q13_prev,Q14_prev,Q21_prev,Q22_prev,Q23_prev,Q24_prev);
`endif
	if (
		( Q11_expected_prev !== 1'bx ) && ( Q11_prev !== Q11_expected_prev )
		&& ((Q11_expected_prev !== last_Q11_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q11_expected_prev);
		$display ("     Real value = %b", Q11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Q11_exp = Q11_expected_prev;
	end
	if (
		( Q12_expected_prev !== 1'bx ) && ( Q12_prev !== Q12_expected_prev )
		&& ((Q12_expected_prev !== last_Q12_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q12_expected_prev);
		$display ("     Real value = %b", Q12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Q12_exp = Q12_expected_prev;
	end
	if (
		( Q13_expected_prev !== 1'bx ) && ( Q13_prev !== Q13_expected_prev )
		&& ((Q13_expected_prev !== last_Q13_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q13_expected_prev);
		$display ("     Real value = %b", Q13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Q13_exp = Q13_expected_prev;
	end
	if (
		( Q14_expected_prev !== 1'bx ) && ( Q14_prev !== Q14_expected_prev )
		&& ((Q14_expected_prev !== last_Q14_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q14_expected_prev);
		$display ("     Real value = %b", Q14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Q14_exp = Q14_expected_prev;
	end
	if (
		( Q21_expected_prev !== 1'bx ) && ( Q21_prev !== Q21_expected_prev )
		&& ((Q21_expected_prev !== last_Q21_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q21 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q21_expected_prev);
		$display ("     Real value = %b", Q21_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_Q21_exp = Q21_expected_prev;
	end
	if (
		( Q22_expected_prev !== 1'bx ) && ( Q22_prev !== Q22_expected_prev )
		&& ((Q22_expected_prev !== last_Q22_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q22 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q22_expected_prev);
		$display ("     Real value = %b", Q22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_Q22_exp = Q22_expected_prev;
	end
	if (
		( Q23_expected_prev !== 1'bx ) && ( Q23_prev !== Q23_expected_prev )
		&& ((Q23_expected_prev !== last_Q23_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q23 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q23_expected_prev);
		$display ("     Real value = %b", Q23_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_Q23_exp = Q23_expected_prev;
	end
	if (
		( Q24_expected_prev !== 1'bx ) && ( Q24_prev !== Q24_expected_prev )
		&& ((Q24_expected_prev !== last_Q24_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q24 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q24_expected_prev);
		$display ("     Real value = %b", Q24_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Q24_exp = Q24_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab9_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
// wires                                               
wire a1;
wire a2;
wire b1;
wire b2;
wire c1;
wire c2;
wire d1;
wire d2;
wire e1;
wire e2;
wire f1;
wire f2;
wire g1;
wire g2;
wire Q11;
wire Q12;
wire Q13;
wire Q14;
wire Q21;
wire Q22;
wire Q23;
wire Q24;

wire sampler;                             

// assign statements (if any)                          
lab9 i1 (
// port map - connection between master ports and signals/registers   
	.a1(a1),
	.a2(a2),
	.b1(b1),
	.b2(b2),
	.c1(c1),
	.c2(c2),
	.CLK(CLK),
	.d1(d1),
	.d2(d2),
	.e1(e1),
	.e2(e2),
	.f1(f1),
	.f2(f2),
	.g1(g1),
	.g2(g2),
	.Q11(Q11),
	.Q12(Q12),
	.Q13(Q13),
	.Q14(Q14),
	.Q21(Q21),
	.Q22(Q22),
	.Q23(Q23),
	.Q24(Q24)
);

// CLK
initial
begin
	repeat(33)
	begin
		CLK = 1'b0;
		CLK = #15000 1'b1;
		# 15000;
	end
	CLK = 1'b0;
end 

lab9_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.sampler_tx(sampler)
);

lab9_vlg_check_tst tb_out(
	.a1(a1),
	.a2(a2),
	.b1(b1),
	.b2(b2),
	.c1(c1),
	.c2(c2),
	.d1(d1),
	.d2(d2),
	.e1(e1),
	.e2(e2),
	.f1(f1),
	.f2(f2),
	.g1(g1),
	.g2(g2),
	.Q11(Q11),
	.Q12(Q12),
	.Q13(Q13),
	.Q14(Q14),
	.Q21(Q21),
	.Q22(Q22),
	.Q23(Q23),
	.Q24(Q24),
	.sampler_rx(sampler)
);
endmodule

