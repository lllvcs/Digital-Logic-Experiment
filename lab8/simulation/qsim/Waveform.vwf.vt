// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/19/2019 15:06:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab8_vlg_sample_tst(
	CLK,
	D,
	J,
	K,
	NR,
	NS,
	R,
	S,
	T,
	sampler_tx
);
input  CLK;
input  D;
input  J;
input  K;
input  NR;
input  NS;
input  R;
input  S;
input  T;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or D or J or K or NR or NS or R or S or T)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab8_vlg_check_tst (
	NQ1,
	NQ2,
	Q1,
	Q2,
	Q3,
	Q4,
	Q5,
	sampler_rx
);
input  NQ1;
input  NQ2;
input  Q1;
input  Q2;
input  Q3;
input  Q4;
input  Q5;
input sampler_rx;

reg  NQ1_expected;
reg  NQ2_expected;
reg  Q1_expected;
reg  Q2_expected;
reg  Q3_expected;
reg  Q4_expected;
reg  Q5_expected;

reg  NQ1_prev;
reg  NQ2_prev;
reg  Q1_prev;
reg  Q2_prev;
reg  Q3_prev;
reg  Q4_prev;
reg  Q5_prev;

reg  NQ1_expected_prev;
reg  NQ2_expected_prev;
reg  Q1_expected_prev;
reg  Q2_expected_prev;
reg  Q3_expected_prev;
reg  Q4_expected_prev;
reg  Q5_expected_prev;

reg  last_NQ1_exp;
reg  last_NQ2_exp;
reg  last_Q1_exp;
reg  last_Q2_exp;
reg  last_Q3_exp;
reg  last_Q4_exp;
reg  last_Q5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	NQ1_prev = NQ1;
	NQ2_prev = NQ2;
	Q1_prev = Q1;
	Q2_prev = Q2;
	Q3_prev = Q3;
	Q4_prev = Q4;
	Q5_prev = Q5;
end

// update expected /o prevs

always @(trigger)
begin
	NQ1_expected_prev = NQ1_expected;
	NQ2_expected_prev = NQ2_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
	Q3_expected_prev = Q3_expected;
	Q4_expected_prev = Q4_expected;
	Q5_expected_prev = Q5_expected;
end



// expected Q1
initial
begin
	Q1_expected = 1'bX;
end 

// expected NQ1
initial
begin
	NQ1_expected = 1'bX;
end 

// expected Q2
initial
begin
	Q2_expected = 1'bX;
end 

// expected NQ2
initial
begin
	NQ2_expected = 1'bX;
end 

// expected Q3
initial
begin
	Q3_expected = 1'bX;
end 

// expected Q4
initial
begin
	Q4_expected = 1'bX;
end 

// expected Q5
initial
begin
	Q5_expected = 1'bX;
end 
// generate trigger
always @(NQ1_expected or NQ1 or NQ2_expected or NQ2 or Q1_expected or Q1 or Q2_expected or Q2 or Q3_expected or Q3 or Q4_expected or Q4 or Q5_expected or Q5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected NQ1 = %b | expected NQ2 = %b | expected Q1 = %b | expected Q2 = %b | expected Q3 = %b | expected Q4 = %b | expected Q5 = %b | ",NQ1_expected_prev,NQ2_expected_prev,Q1_expected_prev,Q2_expected_prev,Q3_expected_prev,Q4_expected_prev,Q5_expected_prev);
	$display("| real NQ1 = %b | real NQ2 = %b | real Q1 = %b | real Q2 = %b | real Q3 = %b | real Q4 = %b | real Q5 = %b | ",NQ1_prev,NQ2_prev,Q1_prev,Q2_prev,Q3_prev,Q4_prev,Q5_prev);
`endif
	if (
		( NQ1_expected_prev !== 1'bx ) && ( NQ1_prev !== NQ1_expected_prev )
		&& ((NQ1_expected_prev !== last_NQ1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NQ1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NQ1_expected_prev);
		$display ("     Real value = %b", NQ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_NQ1_exp = NQ1_expected_prev;
	end
	if (
		( NQ2_expected_prev !== 1'bx ) && ( NQ2_prev !== NQ2_expected_prev )
		&& ((NQ2_expected_prev !== last_NQ2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NQ2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NQ2_expected_prev);
		$display ("     Real value = %b", NQ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_NQ2_exp = NQ2_expected_prev;
	end
	if (
		( Q1_expected_prev !== 1'bx ) && ( Q1_prev !== Q1_expected_prev )
		&& ((Q1_expected_prev !== last_Q1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q1_exp = Q1_expected_prev;
	end
	if (
		( Q2_expected_prev !== 1'bx ) && ( Q2_prev !== Q2_expected_prev )
		&& ((Q2_expected_prev !== last_Q2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q2_exp = Q2_expected_prev;
	end
	if (
		( Q3_expected_prev !== 1'bx ) && ( Q3_prev !== Q3_expected_prev )
		&& ((Q3_expected_prev !== last_Q3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q3_exp = Q3_expected_prev;
	end
	if (
		( Q4_expected_prev !== 1'bx ) && ( Q4_prev !== Q4_expected_prev )
		&& ((Q4_expected_prev !== last_Q4_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q4_exp = Q4_expected_prev;
	end
	if (
		( Q5_expected_prev !== 1'bx ) && ( Q5_prev !== Q5_expected_prev )
		&& ((Q5_expected_prev !== last_Q5_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q5_expected_prev);
		$display ("     Real value = %b", Q5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q5_exp = Q5_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg D;
reg J;
reg K;
reg NR;
reg NS;
reg R;
reg S;
reg T;
// wires                                               
wire NQ1;
wire NQ2;
wire Q1;
wire Q2;
wire Q3;
wire Q4;
wire Q5;

wire sampler;                             

// assign statements (if any)                          
lab8 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.D(D),
	.J(J),
	.K(K),
	.NQ1(NQ1),
	.NQ2(NQ2),
	.NR(NR),
	.NS(NS),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.Q5(Q5),
	.R(R),
	.S(S),
	.T(T)
);

// S
initial
begin
	S = 1'b0;
	S = #60000 1'b1;
	S = #140000 1'b0;
	S = #160000 1'b1;
	S = #300000 1'b0;
	S = #140000 1'b1;
	S = #120000 1'b0;
end 

// R
initial
begin
	R = 1'b0;
	R = #20000 1'b1;
	R = #280000 1'b0;
	R = #160000 1'b1;
	R = #120000 1'b0;
	R = #160000 1'b1;
	R = #220000 1'b0;
end 

// NS
initial
begin
	NS = 1'b1;
	NS = #60000 1'b0;
	NS = #140000 1'b1;
	NS = #160000 1'b0;
	NS = #300000 1'b1;
	NS = #140000 1'b0;
	NS = #120000 1'b1;
end 

// NR
initial
begin
	NR = 1'b1;
	NR = #20000 1'b0;
	NR = #280000 1'b1;
	NR = #160000 1'b0;
	NR = #120000 1'b1;
	NR = #160000 1'b0;
	NR = #220000 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #125000 1'b1;
	#125000;
end 

// D
always
begin
	D = 1'b0;
	D = #250000 1'b1;
	#250000;
end 

// J
initial
begin
	J = 1'b0;
	J = #20000 1'b1;
	J = #40000 1'b0;
	J = #120000 1'b1;
	J = #360000 1'b0;
	J = #100000 1'b1;
	J = #60000 1'b0;
	J = #120000 1'b1;
	J = #100000 1'b0;
end 

// K
initial
begin
	K = 1'b0;
	K = #20000 1'b1;
	K = #40000 1'b0;
	K = #340000 1'b1;
	K = #240000 1'b0;
	K = #180000 1'b1;
	K = #100000 1'b0;
end 

// T
initial
begin
	T = 1'b0;
	T = #100000 1'b1;
	T = #60000 1'b0;
	T = #20000 1'b1;
	T = #100000 1'b0;
	T = #140000 1'b1;
	T = #260000 1'b0;
	T = #160000 1'b1;
end 

lab8_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.D(D),
	.J(J),
	.K(K),
	.NR(NR),
	.NS(NS),
	.R(R),
	.S(S),
	.T(T),
	.sampler_tx(sampler)
);

lab8_vlg_check_tst tb_out(
	.NQ1(NQ1),
	.NQ2(NQ2),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.Q5(Q5),
	.sampler_rx(sampler)
);
endmodule

