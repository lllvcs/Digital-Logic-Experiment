// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/21/2019 13:51:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg D;
reg J;
reg K;
reg NR;
reg NS;
reg R;
reg S;
reg T;
// wires                                               
wire NQ1;
wire NQ2;
wire Q1;
wire Q2;
wire Q3;
wire Q4;
wire Q5;

// assign statements (if any)                          
lab8 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.D(D),
	.J(J),
	.K(K),
	.NQ1(NQ1),
	.NQ2(NQ2),
	.NR(NR),
	.NS(NS),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.Q5(Q5),
	.R(R),
	.S(S),
	.T(T)
);
initial 
begin 
#1000000 $finish;
end 

// S
initial
begin
	S = 1'b0;
	S = #40000 1'b1;
	S = #50000 1'b0;
	S = #20000 1'b1;
	S = #40000 1'b0;
	S = #20000 1'b1;
	S = #40000 1'b0;
	S = #80000 1'b1;
	S = #40000 1'b0;
	S = #40000 1'b1;
	S = #40000 1'b0;
end 

// R
initial
begin
	R = 1'b0;
	R = #110000 1'b1;
	R = #40000 1'b0;
	R = #80000 1'b1;
	R = #40000 1'b0;
	R = #100000 1'b1;
	R = #40000 1'b0;
end 

// NS
initial
begin
	NS = 1'b0;
	NS = #40000 1'b1;
	NS = #50000 1'b0;
	NS = #20000 1'b1;
	NS = #40000 1'b0;
	NS = #20000 1'b1;
	NS = #30000 1'b0;
	NS = #90000 1'b1;
	NS = #40000 1'b0;
	NS = #40000 1'b1;
	NS = #40000 1'b0;
end 

// NR
initial
begin
	NR = 1'b0;
	NR = #110000 1'b1;
	NR = #40000 1'b0;
	NR = #80000 1'b1;
	NR = #40000 1'b0;
	NR = #100000 1'b1;
	NR = #40000 1'b0;
end 

// CLK
initial
begin
	CLK = 1'b0;
end 

// D
initial
begin
	D = 1'b0;
end 

// J
initial
begin
	J = 1'b0;
end 

// K
initial
begin
	K = 1'b0;
end 

// T
initial
begin
	T = 1'b0;
end 
endmodule

